# –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
from aiogram import Router, types
from aiogram.filters import Command
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from app.settings.config import get_config


config = get_config()
router = Router()


@router.message(Command("status"))
async def get_status(message: types.Message, bot_manager):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if not bot_manager:
        await message.answer("‚ùå BotManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    status = await bot_manager.get_system_status()
    
    running_manual = status['manual_tasks_running']
    running_scheduled = status['scheduled_tasks_running']
    scheduled_jobs = status['scheduled_jobs']
    
    status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

ü§ñ –ë–æ—Ç: –†–∞–±–æ—Ç–∞–µ—Ç
üßµ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if status['scheduler_running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(scheduled_jobs)}

{'üîÑ –†—É—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: ' + ', '.join(running_manual) if running_manual else '‚úÖ –ù–µ—Ç —Ä—É—á–Ω—ã—Ö –∑–∞–¥–∞—á'}
{'üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ' + ', '.join(running_scheduled) if running_scheduled else '‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'}
"""
    await message.answer(status_text)


@router.message(Command("run_now"))
async def run_task_now(message: types.Message, bot_manager):
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await message.answer("üü° –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏...")
    
    from app.scheduler.worker import main_task  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    
    success = await bot_manager.run_task_now(
        "manual_main_task",
        main_task,
        range_days=7,
        delta_days=2,
        file_path="data.json"
    )
    
    if not success:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")


@router.message(Command("tasks"))
async def list_tasks(message: types.Message, bot_manager):
    """–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á""" 
    status = await bot_manager.get_system_status()
    running_manual = status['manual_tasks_running']
    running_scheduled = status['scheduled_tasks_running']
    
    if running_manual or running_scheduled:
        tasks_text = ""
        if running_manual:
            tasks_text += "üîÑ –†—É—á–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join([f"‚Ä¢ {task}" for task in running_manual]) + "\n\n"
        if running_scheduled:
            tasks_text += "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join([f"‚Ä¢ {task}" for task in running_scheduled])
        
        await message.answer(tasks_text)
    else:
        await message.answer("‚úÖ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á")


@router.message(Command("stop_task"))
async def stop_task(message: types.Message, bot_manager, loop):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏"""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stop_task –∏–º—è_–∑–∞–¥–∞—á–∏")
        return
    
    task_name = parts[1]
    success = await bot_manager.stop_manual_task(task_name, loop)
    
    if success:
        await message.answer(f"‚èπÔ∏è –ó–∞–¥–∞—á–∞ '{task_name}' –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
    else:
        await message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        

@router.message(Command("stop_all_tasks"))
async def stop_all_tasks(message: types.Message, bot_manager, loop):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    result = await bot_manager.stop_all_manual_tasks(loop)
    
    await message.answer(f"‚èπÔ∏è –ó–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {result}")


@router.message(Command("gis_key_view"))
async def view_gis_key(message: types.Message):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª—é—á 2GIS"""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer(
        f"–¢–µ–∫—É—â–∏–π –∫–ª—é—á 2GIS: {config.GIS_KEY}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–∞–∑: {config.COUNT_USED_GIS_KEY}"
    )

@router.message(Command("gis_key_update"))
async def update_gis_key(message: types.Message):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á 2GIS"""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gis_key_update –∫–ª—é—á")
        return

    config.GIS_KEY = parts[1]
    config.COUNT_USED_GIS_KEY = 0

    await message.answer(f"–ù–æ–≤—ã–π –∫–ª—é—á 2GIS: {config.GIS_KEY}")


@router.message(Command("gis_key_used_update"))
async def update_count_used_gis_key(message: types.Message):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á–∞ 2GIS"""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gis_key_used_update —á–∏—Å–ª–æ")
        return

    if not parts[1].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gis_key_used_update —á–∏—Å–ª–æ")
        return

    config.COUNT_USED_GIS_KEY = int(parts[1])

    await message.answer(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–∞–∑: {config.COUNT_USED_GIS_KEY}")