# –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
from datetime import datetime, timedelta
import time
import json
import asyncio
import threading
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from app.parsers.parser import Parser
from app.parsers.parser_link import parser_link_PDF_from_cards
from app.parsers.parser_pdf import parser_PDF_file_from_links
from app.table.google_table_work import GoogleTable
from app.settings.config import get_config
from app.bot.bot_manager import get_bot_manager


config = get_config()
bot_manager = get_bot_manager()


def get_data(range_days: int, delta_days: int, file_path: str):
    date_to = (datetime.now() - timedelta(days=delta_days)).strftime("%Y-%m-%d")
    date_from = (datetime.now() - timedelta(days=(range_days + delta_days))).strftime("%Y-%m-%d")

    data = []
    existing_ids_case = set()

    try:
        while True:
            parser = Parser(date_from=date_from, date_to=date_to)
            result = parser.run_parse(existing_ids_case)
            data.extend(result)

            if len(result) == 0:
                break

            date_last = data[-1]["case"]["date"]
            date_to = "-".join(date_last.split(".")[::-1])

            config.logger.info(f"date_to: {date_to}",)

            config.logger.info(f"len data: {len(data)}")

            config.logger.info(f"len existing_ids_case: {len(existing_ids_case)}")

    except KeyboardInterrupt:
        config.logger.info("(get_data) –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

    finally:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)


def get_links_PDF_from_data(file_path: str):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            config.logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")

    except FileNotFoundError:
        config.logger.error(f"(def get_links_PDF_from_data): –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    except json.JSONDecodeError as e:
        config.logger.error(f"(def get_links_PDF_from_data): –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return None

    except Exception as e:
        config.logger.error(f"(def get_links_PDF_from_data): –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

    else:
        cards = {}
        for el in data:
            respondent = el["respondent"]
            if respondent["data"] == "–î–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã" or respondent["inn"] == "":
                case = el["case"]
                case_id, case_link = case["num_case"], case["case_link"]
                cards[case_id] = case_link

        cards_link_PDF = parser_link_PDF_from_cards(cards)
        link_PDF_ids = cards_link_PDF.keys()

        new_data = []
        for el in data[::-1]:
            card_id = el["case"]["num_case"]
            if card_id in link_PDF_ids:
                if cards_link_PDF[card_id] is None:
                    continue

                el["case"]["pdf"] = cards_link_PDF[card_id]

            new_data.append(el)

        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, ensure_ascii=False, indent=4)

        config.logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω")


def get_missing_info(file_path: str):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            config.logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")

    except FileNotFoundError:
        config.logger.error(f"(get_missing_info): –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    except json.JSONDecodeError as e:
        config.logger.error(f"(get_missing_info): –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return None

    except Exception as e:
        config.logger.error(f"(get_missing_info): –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

    else:
        cards = {}
        for el in data:
            if el["case"].get("pdf"):
                missing_info = {
                    "find_address": False,
                    "find_inn": False
                }
                case = el["case"]
                respondent = el["respondent"]

                if respondent["data"] == "–î–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã":
                    missing_info["find_address"] = True

                if respondent["inn"] == "":
                    missing_info["find_inn"] = True

                case_id = case["num_case"]
                cards[case_id] = {
                    "link_pdf": case["pdf"],
                    **missing_info
                }

        missing_info_cards = parser_PDF_file_from_links(cards)
        missing_info_ids = missing_info_cards.keys()

        new_data = []
        for el in data[::-1]:
            card_id = el["case"]["num_case"]
            if card_id in missing_info_ids:
                missing_address = missing_info_cards[card_id].get("address")
                missing_inn = missing_info_cards[card_id].get("inn")
                respondent = el["respondent"]

                if respondent["data"] == "–î–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã" and missing_address is None:
                    continue

                if respondent["data"] == "–î–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã" and missing_address is not None:
                    el["respondent"]["data"] = missing_address

                if respondent["inn"] == "" and missing_inn is not None:
                    el["respondent"]["inn"] = missing_inn

            new_data.append(el)

        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, ensure_ascii=False, indent=4)

        config.logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω")


def update_table(file_path: str):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            config.logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")

    except FileNotFoundError:
        config.logger.error(f"(update_table): –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    except json.JSONDecodeError as e:
        config.logger.error(f"(update_table): –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return None

    except Exception as e:
        config.logger.error(f"(update_table): –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

    else:
        google_table = GoogleTable()
        google_table.run_update_table(data, 2)


def _send_step_notification(message: str, loop: asyncio.AbstractEventLoop):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)"""
    try:
        asyncio.run_coroutine_threadsafe(bot_manager.send_notification(message), loop)
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        config.logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {message}")
        
    except Exception as e:
        config.logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            
def main_task(loop: asyncio.AbstractEventLoop, range_days: int = 3, delta_days: int = 2, file_path: str = "data.json", stop_event=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"""
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    thread_id = threading.current_thread().ident
    task_type = "–†—É—á–Ω–∞—è" if "manual" in threading.current_thread().name else "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
    
    try:
        _send_step_notification(f"üü° {task_type} –∑–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞ (–ü–æ—Ç–æ–∫: {thread_id})", loop=loop)
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        _send_step_notification("üü° –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...", loop=loop)
        get_data(range_days=range_days, delta_days=delta_days, file_path=file_path)
        _send_step_notification("‚úÖ –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã", loop=loop)

        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ PDF
        _send_step_notification("üü° –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ PDF...", loop=loop)
        get_links_PDF_from_data(file_path=file_path)
        _send_step_notification("‚úÖ –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –°—Å—ã–ª–∫–∏ –Ω–∞ PDF –ø–æ–ª—É—á–µ–Ω—ã", loop=loop)

        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        _send_step_notification("üü° –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...", loop=loop)
        get_missing_info(file_path=file_path)
        _send_step_notification("‚úÖ –®–∞–≥ 3 –∑–∞–≤–µ—Ä—à–µ–Ω: –ù–µ–¥–æ—Å—Ç–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞", loop=loop)
        
        # –®–∞–≥ 4: –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        _send_step_notification("üü° –®–∞–≥ 4: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É...", loop=loop)
        update_table(file_path=file_path)
        _send_step_notification("‚úÖ –®–∞–≥ 4 –∑–∞–≤–µ—Ä—à–µ–Ω: –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã", loop=loop)

        _send_step_notification("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", loop=loop)
    
    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {task_type.lower()} –∑–∞–¥–∞—á–µ (–ü–æ—Ç–æ–∫: {thread_id}): {str(e)}"
        _send_step_notification(error_msg, loop=loop)
        config.logger.error(error_msg)