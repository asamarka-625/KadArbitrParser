# –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import time
import threading
import asyncio
from concurrent.futures import ThreadPoolExecutor, TimeoutError
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from app.settings.config import get_config


config = get_config()


class TaskScheduler:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ aiogram"""
    
    def __init__(self, bot_manager=None, loop=None):
        self.scheduler = BackgroundScheduler()
        self.jobs = {}  # –ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.manual_tasks = {}  # –†—É—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.task_timeout = 300  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.executor = ThreadPoolExecutor(max_workers=5)
        self.bot_manager = bot_manager
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
        self.running_scheduled_tasks = {}  # –ó–∞–¥–∞—á–∏ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.running_manual_tasks = {}     # –†—É—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
        
        self._pending_notifications = []  # –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ –∑–∞–ø—É—Å–∫–∞ event loop
        self._main_event_loop = loop
        self._stop_events = {}
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        config.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    def _send_pending_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.bot_manager or not self._pending_notifications:
            return
            
        for message in self._pending_notifications:
            self._send_notification_async_safe(message)
        
        self._pending_notifications.clear()
        
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self._stop_all_running_tasks()
            self.executor.shutdown(wait=False)
            
            if self.scheduler.running:
                self.scheduler.shutdown(wait=False)
                config.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self._send_notification_sync("üî¥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            else:
                config.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as err:
            config.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {err}")

    def _send_notification_async_safe(self, message: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.bot_manager:
            return
            
        try:
            if self._main_event_loop and self._main_event_loop.is_running():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_coroutine_threadsafe –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
                future = asyncio.run_coroutine_threadsafe(
                    self.bot_manager.send_notification(message),
                    self._main_event_loop
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                future.add_done_callback(
                    lambda f: self._handle_notification_result(f, message)
                )
            else:
                # –ï—Å–ª–∏ event loop –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                config.logger.warning(f"Event loop –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
                
        except Exception as e:
            config.logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _handle_notification_result(self, future, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            future.result()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            config.logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        except Exception as e:
            config.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{message}': {e}")
    
    def _send_notification_sync(self, message: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        config.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
        
        if not self.bot_manager:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–∂–µ
            self._pending_notifications.append(message)
            config.logger.debug(f"BotManager –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message}")
            return
            
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self._send_notification_async_safe(message)
        
    async def _send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        if self.bot_manager:
            try:
                await self.bot_manager.send_notification(message)
                
            except Exception as e:
                config.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _run_with_timeout(self, func, job_id, *args, **kwargs):
        """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
        def task_wrapper():
            try:
                config.logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –Ω–∞—á–∞—Ç–∞")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—á–∏
                if self.bot_manager:
                    self._send_notification_sync(f"üü° –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –Ω–∞—á–∞—Ç–∞")
                
                start_time = time.time()
                
                # –ü–µ—Ä–µ–¥–∞–µ–º stop_event –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–¥–∞—á–∏
                task_kwargs = kwargs.copy()
                task_kwargs['stop_event'] = stop_event
                task_kwargs['loop'] = self._main_event_loop
                
                result = func(*args, **kwargs)
                
                execution_time = time.time() - start_time
                
                config.logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                if self.bot_manager:
                    self._send_notification_sync(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫")
                
                return result

            except Exception as e:
                config.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ '{job_id}': {e}")
                if self.bot_manager:
                    self._send_notification_sync(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ '{job_id}': {str(e)}")
                    
                raise

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            future = self.executor.submit(task_wrapper)
            self.running_scheduled_tasks[job_id] = {
                'future': future,
                'start_time': time.time(),
                'thread': threading.current_thread().ident
            }

            result = future.result(timeout=self.task_timeout)
            self.running_scheduled_tasks.pop(job_id, None)
            return result

        except TimeoutError:
            config.logger.error(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({self.task_timeout} —Å–µ–∫)")
            
            if self.bot_manager:
                self._send_notification_sync(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({self.task_timeout} —Å–µ–∫)")

            if job_id in self.running_scheduled_tasks:
                future = self.running_scheduled_tasks[job_id]['future']
                if not future.done():
                    future.cancel()
                self.running_scheduled_tasks.pop(job_id, None)
            
            return None

        except Exception as e:
            config.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ '{job_id}': {e}")
            self.running_scheduled_tasks.pop(job_id, None)
            return None

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    def add_hourly_job(self, job_id, func, timeout_minutes=180, *args, **kwargs):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤"""
        self.task_timeout = timeout_minutes * 60

        job = self.scheduler.add_job(
            self._run_with_timeout,
            trigger=CronTrigger(hour='*/5'),
            args=[func, job_id] + list(args),
            kwargs=kwargs,
            id=job_id,
            replace_existing=True,
            max_instances=1
        )

        self.jobs[job_id] = job
        config.logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤)")
        
        if self.bot_manager:
            self._send_notification_sync(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤)")
    
    async def stop_manual_task(self, task_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        if task_name not in self.running_manual_tasks:
            if self.bot_manager:
                await self.bot_manager.send_notification(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        task_info = self.running_manual_tasks[task_name]
        thread = task_info['thread']
        
        if not thread.is_alive():
            # –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
            self.running_manual_tasks.pop(task_name)
            self._stop_events.pop(task_name, None)
            if self.bot_manager:
                await self.bot_manager.send_notification(f"‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ '{task_name}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if task_name in self._stop_events:
                self._stop_events[task_name].set()
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            config.logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ '{task_name}'...")
            thread.join(timeout=30)  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
            
            if thread.is_alive():
                # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ –∂–∏–≤ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞
                config.logger.warning(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                await self.bot_manager.send_notification(f"üõë –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ '{task_name}'...")
                        
            else:
                # –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                self.running_manual_tasks.pop(task_name)
                self._stop_events.pop(task_name, None)
                if self.bot_manager:
                    await self.bot_manager.send_notification(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
                
        except Exception as e:
            config.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ '{task_name}': {e}")
            if self.bot_manager:
                await self.bot_manager.send_notification(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ '{task_name}': {e}")
                
            return False
            
    def stop_all_manual_tasks(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ä—É—á–Ω—ã—Ö –∑–∞–¥–∞—á"""
        tasks_to_stop = list(self.running_manual_tasks.keys())
        results = []
        
        for task_name in tasks_to_stop:
            try:
                # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                if self._main_event_loop and self._main_event_loop.is_running():
                    future = asyncio.run_coroutine_threadsafe(
                        self.stop_manual_task(task_name),
                        self._main_event_loop
                    )
                    results.append((task_name, future))
            except Exception as e:
                config.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ '{task_name}': {e}")
        
        return results
        
    def is_task_stopped(self, task_name):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞"""
        if task_name not in self.running_manual_tasks:
            return True
        
        task_info = self.running_manual_tasks[task_name]
        return not task_info['thread'].is_alive()
            
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ (–∏–∑ aiogram)
    async def run_task_now(self, task_name, func, *args, **kwargs):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if task_name in self.running_manual_tasks:
                task_info = self.running_manual_tasks[task_name]
                if task_info['thread'].is_alive():
                    if self.bot_manager:
                        await self.bot_manager.send_notification(f"‚ö†Ô∏è –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                    return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            stop_event = threading.Event()
            self._stop_events[task_name] = stop_event
            
            def run_manual_task():
                try:
                    thread_id = threading.current_thread().ident
                    start_time = time.time()
                    
                    config.logger.info(f"–†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' –Ω–∞—á–∞—Ç–∞ (–ü–æ—Ç–æ–∫: {thread_id})")
                    self._send_notification_sync(f"üü° –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' –Ω–∞—á–∞—Ç–∞")
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º stop_event –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–¥–∞—á–∏
                    task_kwargs = kwargs.copy()
                    task_kwargs['stop_event'] = stop_event
                    task_kwargs['loop'] = self._main_event_loop
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    result = func(*args, **task_kwargs)
                    
                    execution_time = time.time() - start_time
                    config.logger.info(f"–†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ü–æ—Ç–æ–∫: {thread_id}, –≤—Ä–µ–º—è: {execution_time:.2f} —Å–µ–∫)")
                    self._send_notification_sync(f"‚úÖ –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    if task_name in self.running_manual_tasks:
                        self.running_manual_tasks[task_name]['completion_time'] = time.time()
                        self.running_manual_tasks[task_name]['execution_time'] = execution_time
                        self.running_manual_tasks[task_name]['result'] = result
                    
                    return result
                    
                except Exception as e:
                    execution_time = time.time() - start_time
                    config.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–µ '{task_name}': {e}")
                    self._send_notification_sync(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–µ '{task_name}': {str(e)}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                    if task_name in self.running_manual_tasks:
                        self.running_manual_tasks[task_name]['error'] = str(e)
                        self.running_manual_tasks[task_name]['execution_time'] = execution_time
                    
                    raise

            task_thread = threading.Thread(
                target=run_manual_task,
                name=f"ManualTask-{task_name}",
                daemon=True
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            self.running_manual_tasks[task_name] = {
                'thread': task_thread,
                'start_time': time.time(),
                'stop_event': stop_event,
                'func': func,
                'args': args,
                'kwargs': kwargs
            }
            
            task_thread.start()
            
            if self.bot_manager:
                await self.bot_manager.send_notification(f"üöÄ –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' –∑–∞–ø—É—â–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            config.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–∏ '{task_name}': {e}")
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—É—Å–∫–∞
            self._stop_events.pop(task_name, None)
            self.running_manual_tasks.pop(task_name, None)
            
            if self.bot_manager:
                await self.bot_manager.send_notification(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–∏ '{task_name}': {e}")
            return False

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    def get_running_manual_tasks_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è —Ä—É—á–Ω—ã—Ö –∑–∞–¥–∞—á"""
        running = []
        current_time = time.time()
        
        for task_name, task_info in self.running_manual_tasks.items():
            if task_info["thread"].is_alive():
                running.append(task_name)
        
        # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed = [name for name, task_info in self.running_manual_tasks.items() if not task_info["thread"].is_alive()]
        for name in completed:
            self.running_manual_tasks.pop(name, None)
            
        return running

    def get_running_scheduled_tasks_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
        info = []
        current_time = time.time()

        for job_id, task_info in self.running_scheduled_tasks.items():
            if not task_info['future'].done():
                execution_time = current_time - task_info['start_time']
                info.append({
                    'job_id': job_id,
                    'execution_time': round(execution_time, 2),
                    'status': 'running'
                })

        return info

    def get_all_jobs(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        return self.scheduler.get_jobs()

    def get_system_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        running_manual = self.get_running_manual_tasks_info()
        running_scheduled = self.get_running_scheduled_tasks_info()
        scheduled_jobs = self.get_all_jobs()
        
        return {
            'scheduler_running': self.scheduler.running,
            'manual_tasks_running': running_manual,
            'scheduled_tasks_running': [task['job_id'] for task in running_scheduled],
            'scheduled_jobs_count': len(scheduled_jobs),
            'scheduled_jobs': [job.id for job in scheduled_jobs]
        }